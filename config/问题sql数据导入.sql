-- 面试题库测试数据插入脚本
-- 使用数据库
USE ai_interviewer;

-- 清空现有数据（可选，谨慎使用）
-- DELETE FROM t_question_tag_relation;
-- DELETE FROM t_question_score_detail;
-- DELETE FROM t_question;
-- DELETE FROM t_question_tag;
-- DELETE FROM t_question_category;

-- 1. 插入题目分类数据
INSERT INTO `t_question_category` (`category_name`, `category_code`, `description`, `sort`) VALUES
                                                                                                ('技术题', 'TECHNICAL', '技术相关问题，包括编程、算法、框架应用等', 1),
                                                                                                ('行为题', 'BEHAVIORAL', '行为相关问题，评估软技能和个人特质', 2),
                                                                                                ('情景题', 'SITUATIONAL', '情景模拟问题，评估问题解决能力', 3),
                                                                                                ('逻辑题', 'LOGICAL', '逻辑思维问题，评估分析和推理能力', 4),
                                                                                                ('综合题', 'COMPREHENSIVE', '综合能力评估问题', 5);

-- 2. 插入题目标签数据
INSERT INTO `t_question_tag` (`tag_name`, `category_id`) VALUES
-- 技术类标签 (category_id = 1)
('Java基础', 1),
('Spring框架', 1),
('Spring Boot', 1),
('数据库', 1),
('MySQL', 1),
('Redis', 1),
('多线程', 1),
('JVM', 1),
('设计模式', 1),
('算法', 1),
('数据结构', 1),
('微服务', 1),
('分布式', 1),
('前端技术', 1),
('Vue.js', 1),
('JavaScript', 1),

-- 行为类标签 (category_id = 2)
('团队协作', 2),
('沟通能力', 2),
('压力管理', 2),
('领导力', 2),
('学习能力', 2),
('时间管理', 2),
('冲突处理', 2),
('创新思维', 2),

-- 情景类标签 (category_id = 3)
('问题解决', 3),
('危机处理', 3),
('决策能力', 3),
('客户服务', 3),

-- 逻辑类标签 (category_id = 4)
('逻辑推理', 4),
('数学思维', 4),
('分析能力', 4),

-- 综合类标签 (category_id = 5)
('职业规划', 5),
('行业认知', 5);

-- 3. 插入题库数据

-- ===================== Java技术题 =====================
INSERT INTO `t_question` (`title`, `content`, `category_id`, `difficulty`, `position`, `standard_answer`, `keywords`, `creator_id`, `status`) VALUES

-- Java基础题
('Java中equals()和==的区别',
 '请详细解释Java中equals()方法和==操作符的区别，并举例说明在什么情况下使用哪种比较方式？',
 1, 2, 'Java开发工程师',
 '== 比较的是引用地址，equals()比较的是对象内容。对于基本数据类型，只能用==比较值；对于引用类型，==比较的是内存地址，equals()比较的是对象的实际内容。String类重写了equals()方法来比较字符串内容。',
 'Java基础,equals,==,引用比较,内容比较', 1, 1),

('Java中的多态性及其实现',
 '请解释Java中多态性的概念，说明多态的实现方式，并提供一个具体的代码示例。',
 1, 3, 'Java开发工程师',
 '多态是指同一接口的不同实现。Java中通过继承、接口和方法重写实现多态。运行时多态通过虚方法调用实现，编译时多态通过方法重载实现。',
 '多态,继承,接口,方法重写,虚方法调用', 1, 1),

('ArrayList和LinkedList的区别及使用场景',
 '请比较ArrayList和LinkedList的底层实现、性能特点，并说明在什么场景下选择哪种数据结构？',
 1, 3, 'Java开发工程师',
 'ArrayList基于动态数组实现，随机访问快O(1)，插入删除慢O(n)；LinkedList基于双向链表实现，插入删除快O(1)，随机访问慢O(n)。频繁查询用ArrayList，频繁增删用LinkedList。',
 'ArrayList,LinkedList,数据结构,性能,使用场景', 1, 1),

('Java内存模型JMM详解',
 '请详细解释Java内存模型（JMM），包括主内存、工作内存的概念，以及volatile关键字的作用机制。',
 1, 4, '高级Java开发工程师',
 'JMM规定所有变量存储在主内存，每个线程有自己的工作内存。线程对变量的操作必须在工作内存中进行，然后同步到主内存。volatile保证可见性和有序性，但不保证原子性。',
 'JMM,Java内存模型,volatile,线程安全,内存可见性', 1, 1),

-- Spring框架题
('Spring IoC容器的工作原理',
 '请详细解释Spring IoC（控制反转）容器的工作原理，包括Bean的生命周期和依赖注入的实现方式。',
 1, 3, 'Java开发工程师',
 'IoC容器负责创建对象、管理对象生命周期和处理对象间依赖关系。Bean生命周期包括实例化、属性填充、初始化、使用、销毁。依赖注入通过构造器注入、setter注入、接口注入实现。',
 'Spring,IoC,依赖注入,Bean生命周期,控制反转', 1, 1),

('Spring AOP的实现原理',
 '请解释Spring AOP（面向切面编程）的实现原理，包括JDK动态代理和CGLIB代理的区别。',
 1, 4, 'Java开发工程师',
 'Spring AOP通过代理模式实现。JDK动态代理基于接口，运行时生成代理类；CGLIB基于继承，通过字节码技术生成子类。有接口用JDK代理，无接口用CGLIB代理。',
 'Spring AOP,动态代理,CGLIB,JDK代理,切面编程', 1, 1),

('Spring Boot自动配置原理',
 '请详细解释Spring Boot自动配置的实现原理，包括@EnableAutoConfiguration注解的作用机制。',
 1, 4, 'Spring Boot开发工程师',
 '自动配置通过@EnableAutoConfiguration启用，利用SpringFactoriesLoader机制加载META-INF/spring.factories中的配置类。根据条件注解@ConditionalOnClass等判断是否生效，实现零配置启动。',
 'Spring Boot,自动配置,EnableAutoConfiguration,条件注解', 1, 1),

-- 数据库题
('MySQL索引的类型及优化策略',
 '请介绍MySQL中不同类型的索引（B+Tree、Hash等），并说明如何进行索引优化？',
 1, 3, '后端开发工程师',
 'MySQL主要有B+Tree索引（InnoDB默认）、Hash索引、全文索引。优化策略：选择区分度高的列、避免过多索引、合理使用复合索引、避免索引失效的SQL写法。',
 'MySQL,索引,B+Tree,索引优化,性能调优', 1, 1),

('数据库事务的ACID特性',
 '请详细解释数据库事务的ACID特性，并说明MySQL是如何保证这些特性的？',
 1, 3, '后端开发工程师',
 'ACID：原子性（Atomicity）通过undo log保证；一致性（Consistency）通过约束和触发器保证；隔离性（Isolation）通过锁和MVCC保证；持久性（Durability）通过redo log保证。',
 '数据库事务,ACID,原子性,一致性,隔离性,持久性', 1, 1),

('Redis数据结构及应用场景',
 '请介绍Redis的主要数据结构，并说明每种数据结构的典型应用场景。',
 1, 3, '后端开发工程师',
 'String：缓存、计数器；Hash：用户信息存储；List：消息队列、时间线；Set：去重、交并差集运算；ZSet：排行榜、延时队列；Bitmap：用户签到；HyperLogLog：UV统计。',
 'Redis,数据结构,缓存,应用场景,NoSQL', 1, 1),

-- 算法题
('快速排序算法实现及优化',
 '请实现快速排序算法，分析其时间复杂度，并说明可能的优化策略。',
 1, 4, '软件开发工程师',
 '快速排序采用分治思想，选择基准值进行分区，递归排序子数组。平均时间复杂度O(nlogn)，最坏O(n²)。优化：三数取中选基准、尾递归优化、小数组用插入排序。',
 '快速排序,算法,时间复杂度,分治算法,排序优化', 1, 1),

('二叉树的遍历方式及实现',
 '请说明二叉树的几种遍历方式，并实现其中的中序遍历（递归和非递归版本）。',
 1, 3, '软件开发工程师',
 '二叉树遍历有前序（根左右）、中序（左根右）、后序（左右根）、层序遍历。中序遍历递归版本简单直观，非递归版本使用栈模拟递归过程。',
 '二叉树,遍历算法,中序遍历,递归,非递归,数据结构', 1, 1),

-- ===================== 行为题 =====================
('描述一次团队合作的经历',
 '请描述一次你参与团队项目的经历，包括你的角色、面临的挑战以及最终的结果。请重点说明你是如何与团队成员协作的？',
 2, 2, '全职位通用',
 '应重点关注：具体的项目背景、个人承担的责任、团队协作的具体方式、遇到的困难及解决方法、个人贡献和最终成果、从中学到的经验教训。',
 '团队合作,沟通协调,项目管理,问题解决,责任担当', 1, 1),

('处理工作压力的方法',
 '当你面临紧急项目deadline或者工作量超出预期时，你通常如何管理压力并确保工作质量？请举一个具体例子。',
 2, 2, '全职位通用',
 '应展现：压力识别能力、优先级管理、时间规划、资源协调、质量控制、情绪管理、寻求帮助的能力。',
 '压力管理,时间管理,优先级,工作效率,情绪控制', 1, 1),

('学习新技术的经历',
 '请描述一次你主动学习新技术或新技能的经历，包括学习的动机、过程和应用结果。',
 2, 2, '技术类职位',
 '应体现：学习动机、学习方法、实践应用、持续改进、知识分享、学习成果的量化。',
 '学习能力,自我驱动,技术热情,持续改进,知识分享', 1, 1),

('处理意见分歧的经历',
 '请描述一次你与同事或上级在工作中产生意见分歧的情况，你是如何处理的？最终结果如何？',
 2, 3, '全职位通用',
 '应展现：倾听理解能力、沟通表达能力、寻找共同点、妥协与坚持的平衡、建设性解决方案、维护关系的能力。',
 '沟通能力,冲突处理,协商谈判,人际关系,问题解决', 1, 1),

('领导项目的经验',
 '请描述一次你担任项目负责人或团队leader的经历，包括团队规模、项目目标以及你的管理方式。',
 2, 4, '管理类职位',
 '应体现：领导风格、团队激励、目标设定、进度控制、风险管理、决策能力、团队建设。',
 '领导力,项目管理,团队建设,目标管理,决策能力', 1, 1),

-- ===================== 情景题 =====================
('客户需求变更处理',
 '假设你正在开发一个项目，已经完成了70%，但客户突然提出重大需求变更，要求增加新功能并且不延长工期。你会如何处理这个情况？',
 3, 3, '项目管理/开发类',
 '应考虑：需求分析、影响评估、资源重新分配、与客户沟通协商、风险控制、团队士气管理、替代方案制定。',
 '需求变更,项目管理,客户沟通,风险控制,资源分配', 1, 1),

('系统故障紧急处理',
 '假设周五晚上生产系统突然出现严重故障，影响了大量用户使用，而第二天是周末。你会如何组织和协调故障处理？',
 3, 4, '技术管理类',
 '应包含：故障定位、影响范围评估、紧急响应团队组建、用户通知、修复方案制定、测试验证、事后总结。',
 '故障处理,应急响应,团队协调,用户沟通,问题解决', 1, 1),

('资源冲突解决',
 '假设你负责的两个重要项目都需要使用同一个关键技术人员，但这个人员的时间有限。你会如何平衡和解决这个资源冲突？',
 3, 3, '项目管理类',
 '应考虑：优先级评估、资源替代方案、时间安排优化、技能培养、外部资源引入、风险缓解。',
 '资源管理,优先级管理,协调能力,风险控制,团队规划', 1, 1),

('技术选型决策',
 '你的团队需要选择一个新的技术框架来开发下一个产品。有多个选项可选，各有优缺点，团队成员意见不一。你会如何进行技术选型决策？',
 3, 4, '技术决策类',
 '应包含：技术调研、对比分析、团队技能评估、项目需求匹配、风险评估、团队共识建立、决策文档化。',
 '技术选型,决策分析,团队共识,技术调研,风险评估', 1, 1),

-- ===================== 逻辑思维题 =====================
('海盗分金币问题',
 '5个海盗抢到100枚金币，他们按照以下规则分配：最年长的海盗提出分配方案，所有海盗投票，如果方案获得超过半数同意就执行，否则提出方案的海盗被扔进海里，由下一个年长的海盗提出方案。假设每个海盗都足够聪明且贪婪，请问最年长的海盗应该如何分配？',
 4, 5, '算法/逻辑类职位',
 '答案：(97,0,1,2,0)。通过逆推法，从最后两个海盗开始分析，最年长海盗需要确保获得3票支持，给第3、4个海盗各1枚和2枚金币来争取支持。',
 '逻辑推理,博弈论,逆推法,数学思维', 1, 1),

('烧绳计时问题',
 '有两根不均匀的绳子，每根绳子燃烧完需要1小时，但燃烧速度不均匀。现在要计时45分钟，请问如何利用这两根绳子和打火机来实现？',
 4, 4, '算法/逻辑类职位',
 '答案：第一根绳子两头同时点燃（30分钟烧完），同时点燃第二根绳子的一头。当第一根绳子烧完时，点燃第二根绳子的另一头，再过15分钟第二根绳子烧完，总共45分钟。',
 '逻辑思维,创造性思维,时间计算', 1, 1),

-- ===================== 综合能力题 =====================
('职业规划和发展目标',
 '请谈谈你的职业规划，包括短期（1-2年）和长期（3-5年）的发展目标，以及为实现这些目标你打算采取什么行动？',
 5, 2, '全职位通用',
 '应体现：清晰的职业定位、现实可行的目标、具体的行动计划、持续学习的意识、对行业趋势的理解。',
 '职业规划,发展目标,自我认知,行动计划,学习规划', 1, 1),

('对公司和行业的了解',
 '请谈谈你对我们公司和所在行业的了解，以及你认为这个行业未来几年的发展趋势如何？',
 5, 2, '全职位通用',
 '应展现：充分的公司调研、行业背景了解、趋势判断能力、市场敏感度、战略思维。',
 '行业认知,公司了解,趋势分析,市场判断,战略思维', 1, 1),

('为什么选择我们公司',
 '在众多的工作机会中，为什么选择我们公司？你认为自己能为公司带来什么价值？',
 5, 2, '全职位通用',
 '应包含：公司吸引力分析、个人价值匹配、能力贡献点、发展期望、双赢理念。',
 '求职动机,价值匹配,个人价值,发展期望,企业认同', 1, 1);

-- 4. 插入题目标签关联数据
INSERT INTO `t_question_tag_relation` (`question_id`, `tag_id`) VALUES
-- Java基础题关联标签
(1, 1), (1, 2),  -- equals和==问题关联Java基础
(2, 1), (2, 9),  -- 多态性关联Java基础和设计模式
(3, 1), (3, 11), -- ArrayList和LinkedList关联Java基础和数据结构
(4, 1), (4, 7),  -- JMM关联Java基础和多线程

-- Spring相关题关联标签
(5, 2), (5, 3),  -- Spring IoC关联Spring框架
(6, 2), (6, 3),  -- Spring AOP关联Spring框架
(7, 3), (7, 4),  -- Spring Boot关联Spring Boot

-- 数据库题关联标签
(8, 4), (8, 5),  -- MySQL索引关联数据库和MySQL
(9, 4), (9, 5),  -- 事务ACID关联数据库和MySQL
(10, 6),         -- Redis关联Redis标签

-- 算法题关联标签
(11, 10), (11, 11), -- 快速排序关联算法和数据结构
(12, 10), (12, 11), -- 二叉树遍历关联算法和数据结构

-- 行为题关联标签
(13, 17),        -- 团队合作
(14, 19),        -- 压力管理
(15, 21),        -- 学习能力
(16, 18), (16, 23), -- 意见分歧关联沟通能力和冲突处理
(17, 20),        -- 领导项目关联领导力

-- 情景题关联标签
(18, 25),        -- 需求变更关联问题解决
(19, 25), (19, 26), -- 系统故障关联问题解决和危机处理
(20, 25),        -- 资源冲突关联问题解决
(21, 25), (21, 27), -- 技术选型关联问题解决和决策能力

-- 逻辑题关联标签
(22, 29), (22, 31), -- 海盗分金币关联逻辑推理和分析能力
(23, 29), (23, 30), -- 烧绳计时关联逻辑推理和数学思维

-- 综合题关联标签
(24, 33), (24, 21), -- 职业规划关联职业规划和学习能力
(25, 34),        -- 公司行业了解关联行业认知
(26, 33), (26, 34); -- 选择公司关联职业规划和行业认知

-- 5. 插入一些示例评分详情数据（可选，用于测试报告功能）
-- 这部分数据通常在实际面试后自动生成，这里提供一些示例
INSERT INTO `t_question_score_detail` (`report_id`, `question_id`, `score`, `keyword_match_rate`, `semantic_similarity`, `analysis`) VALUES
                                                                                                                                         (1, 1, 85.00, 75.50, 88.20, '候选人对equals和==的区别理解准确，能够举出恰当的例子说明，显示出扎实的Java基础功底。'),
                                                                                                                                         (1, 2, 78.00, 70.00, 82.50, '对多态概念理解正确，但在实现细节的描述上略显不足，建议加强对虚方法调用机制的理解。'),
                                                                                                                                         (1, 13, 92.00, 85.00, 95.00, '团队合作经历描述详细，展现出良好的沟通协调能力和团队意识，是一个优秀的团队成员。');

-- 查询验证数据
SELECT '=== 题目分类统计 ===' as info;
SELECT c.category_name, COUNT(q.id) as question_count
FROM t_question_category c
         LEFT JOIN t_question q ON c.id = q.category_id
GROUP BY c.id, c.category_name
ORDER BY c.sort;

SELECT '=== 难度分布统计 ===' as info;
SELECT
    difficulty,
    COUNT(*) as count,
    CONCAT(ROUND(COUNT(*) * 100.0 / (SELECT COUNT(*) FROM t_question), 1), '%') as percentage
FROM t_question
GROUP BY difficulty
ORDER BY difficulty;

SELECT '=== 标签使用统计 ===' as info;
SELECT t.tag_name, COUNT(r.question_id) as usage_count
FROM t_question_tag t
         LEFT JOIN t_question_tag_relation r ON t.id = r.tag_id
GROUP BY t.id, t.tag_name
HAVING usage_count > 0
ORDER BY usage_count DESC
    LIMIT 10;